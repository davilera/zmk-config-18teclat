/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

&mt {
  tapping-term-ms = <201>;
  flavor = "tap-preferred";
};

// ===================
//   LAYERS
// ===================

#define AL1 0
#define AL2 1
#define I18N 2
#define SYM1 3
#define SYM2 4
#define SYS 5
#define NUM 6
#define BT 7

// ===================
//   DELAYS
// ===================

#define HOLDTAP_TAPPING_TERM_MS 200
#define HOLDTAP_QUICK_TAP_MS 200

// ===================
//   LAYOUT
// ===================

/* -------------------------------------- */
/*     0   1   2     |     3   4   5       */
/* 6   7   8   9     |    10  11  12  13  */
/*             14 15 | 16 17              */
/* -------------------------------------- */

/ {
  combos {
    compatible = "zmk,combos";
    combo_bt  {
      timeout-ms = <10>;
      key-positions = <3 4 5>;
      bindings = <&to BT>;
      layers = <SYS>;
    };
    combo_caps {
      timeout-ms = <30>;
      key-positions = <7 8 9>;
      bindings = <&caps_word>;
      layers = <AL1>;
    };
    combo_num {
      timeout-ms = <30>;
      key-positions = <10 11 12>;
      bindings = <&to NUM>;
      layers = <AL1>;
    };
  };

  macros {
    utf_ellipsis: utf_ellipsis { // …
      compatible = "zmk,behavior-macro";
      wait-ms = <0>;
      tap-ms = <0>;
      #binding-cells = <0>;
      bindings
        = < &macro_tap &kp LC(LS(U)) >
        , < &macro_wait_time 50 >
        , < &macro_tap &kp N2 &kp N0 &kp N2 &kp N6 >
        , < &macro_wait_time 20 >
        , < &macro_tap &kp ENTER >;
    };
    utf_fem_ord: utf_fem_ord { // ª
      compatible = "zmk,behavior-macro";
      wait-ms = <0>;
      tap-ms = <0>;
      #binding-cells = <0>;
      bindings
        = < &macro_tap &kp LC(LS(U)) >
        , < &macro_wait_time 50 >
        , < &macro_tap &kp N0 &kp N0 &kp A &kp A >
        , < &macro_wait_time 20 >
        , < &macro_tap &kp ENTER >;
    };
    utf_masc_ord: utf_masc_ord { // º
      compatible = "zmk,behavior-macro";
      wait-ms = <0>;
      tap-ms = <0>;
      #binding-cells = <0>;
      bindings
        = < &macro_tap &kp LC(LS(U)) >
        , < &macro_wait_time 50 >
        , < &macro_tap &kp N0 &kp N0 &kp B &kp A >
        , < &macro_wait_time 20 >
        , < &macro_tap &kp ENTER >;
    };
    utf_ndash: utf_ndash { // —
      compatible = "zmk,behavior-macro";
      wait-ms = <0>;
      tap-ms = <0>;
      #binding-cells = <0>;
      bindings
        = < &macro_tap &kp LC(LS(U)) >
        , < &macro_wait_time 50 >
        , < &macro_tap &kp N2 &kp N0 &kp N1 &kp N3 >
        , < &macro_wait_time 20 >
        , < &macro_tap &kp ENTER >;
    };
    utf_mdash: utf_mdash { // —
      compatible = "zmk,behavior-macro";
      wait-ms = <0>;
      tap-ms = <0>;
      #binding-cells = <0>;
      bindings
        = < &macro_tap &kp LC(LS(U)) >
        , < &macro_wait_time 50 >
        , < &macro_tap &kp N2 &kp N0 &kp N1 &kp N4 >
        , < &macro_wait_time 20 >
        , < &macro_tap &kp ENTER >;
    };
    utf_nbsp: utf_nbsp {
      compatible = "zmk,behavior-macro";
      wait-ms = <0>;
      tap-ms = <0>;
      #binding-cells = <0>;
      bindings
        = < &macro_tap &kp LC(LS(U)) >
        , < &macro_wait_time 50 >
        , < &macro_tap &kp N0 &kp N0 &kp A &kp N0 >
        , < &macro_wait_time 20 >
        , < &macro_tap &kp ENTER >;
    };
    utf_german_quote: utf_german_quote { // „
      compatible = "zmk,behavior-macro";
      wait-ms = <0>;
      tap-ms = <0>;
      #binding-cells = <0>;
      bindings
        = < &macro_tap &kp LC(LS(U)) >
        , < &macro_wait_time 50 >
        , < &macro_tap &kp N2 &kp N0 &kp N1 &kp E >
        , < &macro_wait_time 20 >
        , < &macro_tap &kp ENTER >;
    };
    type_qu: type_qu { // qu
      compatible = "zmk,behavior-macro";
      wait-ms = <0>;
      tap-ms = <0>;
      #binding-cells = <0>;
      bindings
        = < &macro_tap &kp Q &kp U >;
    };
    type_qumlaut: type_qumlaut { // qü
      compatible = "zmk,behavior-macro";
      wait-ms = <0>;
      tap-ms = <0>;
      #binding-cells = <0>;
      bindings
        = < &macro_tap &kp Q &kp RA(Y) >;
    };
    type_ldotl: type_ldotl { // l·l
      compatible = "zmk,behavior-macro";
      wait-ms = <0>;
      tap-ms = <0>;
      #binding-cells = <0>;
      bindings
        = < &macro_tap &kp L &kp LC(LS(U)) >
        , < &macro_wait_time 50 >
        , < &macro_tap &kp N0 &kp N0 &kp B &kp N7 >
        , < &macro_wait_time 20 >
        , < &macro_tap &kp ENTER >
        , < &macro_tap &kp L >;
    };
    type_cio: type_cio { // ció
      compatible = "zmk,behavior-macro";
      wait-ms = <0>;
      tap-ms = <0>;
      #binding-cells = <0>;
      bindings
        = < &macro_tap &kp C &kp I &kp RA(O) >;
    };
    type_000: type_000 { // 000
      compatible = "zmk,behavior-macro";
      wait-ms = <0>;
      tap-ms = <0>;
      #binding-cells = <0>;
      bindings
        = < &macro_tap &kp N0 &kp N0 &kp N0 >;
    };
    type_o_grave: type_o_grave { // ò
      compatible = "zmk,behavior-macro";
      wait-ms = <0>;
      tap-ms = <0>;
      #binding-cells = <0>;
      bindings
        = < &macro_tap &kp RA(GRAVE) &kp O >;
    };
    type_a_grave: type_a_grave { // à
      compatible = "zmk,behavior-macro";
      wait-ms = <0>;
      tap-ms = <0>;
      #binding-cells = <0>;
      bindings
        = < &macro_tap &kp RA(GRAVE) &kp A >;
    };
    type_e_grave: type_e_grave { // è
      compatible = "zmk,behavior-macro";
      wait-ms = <0>;
      tap-ms = <0>;
      #binding-cells = <0>;
      bindings
        = < &macro_tap &kp RA(GRAVE) &kp E >;
    };
    type_degree: type_degree { // °
      compatible = "zmk,behavior-macro";
      wait-ms = <0>;
      tap-ms = <0>;
      #binding-cells = <0>;
      bindings
        = < &macro_tap &kp RA(LS(N0)) &kp SPACE >;
    };
    type_comma_space: type_comma_space { // ,_
      compatible = "zmk,behavior-macro";
      wait-ms = <0>;
      tap-ms = <0>;
      #binding-cells = <0>;
      bindings
        = < &macro_tap &kp COMMA &kp SPACE >;
    };
    type_dot_space: type_dot_space { // ,_
      compatible = "zmk,behavior-macro";
      wait-ms = <0>;
      tap-ms = <0>;
      #binding-cells = <0>;
      bindings
        = < &macro_tap &kp DOT &kp SPACE >;
    };
  };

  behaviors {
    // ---------------------------------------------------
    //    GENERICS
    // ---------------------------------------------------
    hrm: homerow_mods {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      tapping-term-ms = <300>;
      quick-tap-ms = <250>;
      flavor = "tap-preferred";
      bindings = <&kp>, <&kp>;
    };
    ht: holdtap {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      tapping-term-ms = <HOLDTAP_TAPPING_TERM_MS>;
      quick-tap-ms = <HOLDTAP_QUICK_TAP_MS>;
      flavor = "tap-preferred";
      bindings = <&kp>, <&kp>;
    };
    htl: holdtap_layer {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      tapping-term-ms = <220>;
      quick-tap-ms = <250>;
      flavor = "tap-preferred";
      bindings = <&mo>, <&kp>;
    };
    htl2: holdtap_layer_2 {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      tapping-term-ms = <220>;
      quick-tap-ms = <250>;
      flavor = "hold-preferred";
      bindings = <&mo>, <&kp>;
    };

    // ---------------------------------------------------
    //    SPECIAL KEYS
    // ---------------------------------------------------
    mo_rpt: mo_rpt {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      tapping-term-ms = <HOLDTAP_TAPPING_TERM_MS>;
      quick-tap-ms = <HOLDTAP_QUICK_TAP_MS>;
      flavor = "tap-preferred";
      bindings = <&mo>, <&key_repeat>;
    };

    // ---------------------------------------------------
    //    I18N - HOLDING UTF CHARS
    // ---------------------------------------------------
    ht_elli: ht_elli {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      tapping-term-ms = <HOLDTAP_TAPPING_TERM_MS>;
      quick-tap-ms = <HOLDTAP_QUICK_TAP_MS>;
      flavor = "tap-preferred";
      bindings = <&utf_ellipsis>, <&kp>;
    };
    ht_ndsh: ht_ndsh {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      tapping-term-ms = <HOLDTAP_TAPPING_TERM_MS>;
      quick-tap-ms = <HOLDTAP_QUICK_TAP_MS>;
      flavor = "tap-preferred";
      bindings = <&utf_ndash>, <&kp>;
    };
    ht_ordf: ht_ordf {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      tapping-term-ms = <HOLDTAP_TAPPING_TERM_MS>;
      quick-tap-ms = <HOLDTAP_QUICK_TAP_MS>;
      flavor = "tap-preferred";
      bindings = <&utf_fem_ord>, <&kp>;
    };
    ht_ordm: ht_ordm {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      tapping-term-ms = <HOLDTAP_TAPPING_TERM_MS>;
      quick-tap-ms = <HOLDTAP_QUICK_TAP_MS>;
      flavor = "tap-preferred";
      bindings = <&utf_masc_ord>, <&kp>;
    };
    ht_mdsh: ht_mdsh {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      tapping-term-ms = <HOLDTAP_TAPPING_TERM_MS>;
      quick-tap-ms = <HOLDTAP_QUICK_TAP_MS>;
      flavor = "tap-preferred";
      bindings = <&utf_mdash>, <&kp>;
    };
    ht_agrv: ht_agrv {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      tapping-term-ms = <HOLDTAP_TAPPING_TERM_MS>;
      quick-tap-ms = <HOLDTAP_QUICK_TAP_MS>;
      flavor = "tap-preferred";
      bindings = <&kp>, <&type_a_grave>;
    };
    ht_deg: ht_deg {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      tapping-term-ms = <HOLDTAP_TAPPING_TERM_MS>;
      quick-tap-ms = <HOLDTAP_QUICK_TAP_MS>;
      flavor = "tap-preferred";
      bindings = <&type_degree>, <&kp>;
    };
    ht_deqt: ht_deqt {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      tapping-term-ms = <HOLDTAP_TAPPING_TERM_MS>;
      quick-tap-ms = <HOLDTAP_QUICK_TAP_MS>;
      flavor = "tap-preferred";
      bindings = <&utf_german_quote>, <&kp>;
    };
    ht_nbsp: ht_nbsp {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      tapping-term-ms = <HOLDTAP_TAPPING_TERM_MS>;
      quick-tap-ms = <HOLDTAP_QUICK_TAP_MS>;
      flavor = "tap-preferred";
      bindings = <&utf_nbsp>, <&kp>;
    };
    ht_000: ht_000 {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      tapping-term-ms = <HOLDTAP_TAPPING_TERM_MS>;
      quick-tap-ms = <HOLDTAP_QUICK_TAP_MS>;
      flavor = "tap-preferred";
      bindings = <&type_000>, <&kp>;
    };
    ht_qu_i18n: ht_qu_i18n {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      tapping-term-ms = <HOLDTAP_TAPPING_TERM_MS>;
      quick-tap-ms = <HOLDTAP_QUICK_TAP_MS>;
      flavor = "tap-preferred";
      bindings = <&type_qumlaut>, <&type_qu>;
    };
  };
  keymap {
    compatible = "zmk,keymap";
    alpha1 {
      bindings = <
                      &hrm LGUI L       &hrm LCTL G         &hrm LALT D              &hrm  LALT H      &hrm  RCTL U      &hrm LGUI O
        &mt LSHIFT I  &htl SYM2 S       &htl SYM1 R         &htl SYS  T              &htl  SYS  N      &htl  SYM1 E      &htl SYM2 A      &mt RSHIFT C
                                        &mo_rpt NUM 0       &ht LC(LA(LGUI)) SPC     &htl2 AL2  COMMA  &htl2 I18N DOT
      >;
    };

    alpha2 {
      bindings = <
                      &hrm LGUI V       &hrm LCTL W         &hrm LALT M              &hrm LALT F     &hrm RCTL DQT    &hrm LGUI Z
        &mt LSHIFT Q  &kp  J            &kp  P              &kp  K                   &kp B           &kp  SQT         &kp  X           &mt RSHIFT Y
                                        &type_qu            &type_comma_space        &none           &none
      >;
    };

    i18n {
      bindings = <
                          &type_o_grave        &kp RA(Y)           &type_ldotl              &kp RA(COMMA)   &kp RA(U)        &ht RA(P) RA(O)
        &mt RSHIFT RA(J)  &ht_agrv RA(S) 0     &type_e_grave       &type_cio                &kp RA(N)       &kp RA(E)        &ht RA(Q) RA(A)  &mt RSHIFT RA(I)
                                               &ht_qu_i18n 0 0     &type_dot_space          &none           &none
      >;
    };

    sym1 {
      bindings = <
                   &ht_ndsh 0 MINUS  &kp STAR            &kp PLUS                 &kp CARET       &ht RA(N9) LPAR  &ht RA(N0) RPAR
        &kp SLASH  &ht_mdsh 0 UNDER  &ht RA(QMARK) QMARK &kp EQUAL                &ht_deg 0 PRCNT &ht RA(LBKT) LT  &ht RA(RBKT) GT  &kp SEMICOLON
                                     &none               &utf_nbsp                &kp COMMA       &kp DOT
      >;
    };

    sym2 {
      bindings = <
                    &ht_ordf 0 AT   &ht_ordm 0 HASH       &ht RA(N5) DOLLAR             &kp AMPS    &ht RA(RS(LBKT)) LBRC   &ht RA(RS(RBKT)) RBRC
         &kp BSLH   &kp GRAVE       &ht RA(RS(N1)) EXCL   &kp PIPE                      &kp TILDE   &ht_deqt 0 LBKT         &ht RA(RS(LBKT)) RBKT   &ht_elli 0 COLON
                                    &none                 &utf_nbsp                     &kp COMMA   &kp DOT
      >;
    };

    sys {
      bindings = <
                         &kp ESC     &kp LC(LS(TAB))   &kp BKSP                   &kp BKSP        &ht HOME LEFT  &kp PSCRN
        &mt LSHIFT TAB   &kp DEL     &kp LC(TAB)       &kp ENTER                  &ht PG_DN DOWN  &ht PG_UP UP   &ht END RIGHT      &none
                                     &kp LC(C)         &ht LC(LA(LGUI)) LC(V)     &none           &none
      >;
    };

    num {
      bindings = <
                             &ht EQUAL MINUS &hrm LCTL STAR &hrm LALT PLUS         &hrm LALT KP_N7  &hrm RCTL KP_N8  &ht_nbsp 0 KP_N9
        &mt RSHIFT SLASH     &kp KP_N3       &kp KP_N2      &kp KP_N1              &kp KP_N4        &kp KP_N5        &kp KP_N6         &mt RSHIFT ENTER
                                             &to AL1        &ht LC(LA(LGUI)) SPC   &ht_000 0 KP_N0  &ht UNDER DOT
      >;
    };

    bt {
      bindings = <
                      &none         &none         &none                   &none       &none      &none
        &bt BT_CLR    &bt BT_SEL 2  &bt BT_SEL 1  &bt BT_SEL 0            &none       &none      &none      &none
                                    &sys_reset    &to AL1                 &bootloader &none
      >;
    };
  };
};

