/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#include "macros.conf"


&mt {
  tapping-term-ms = <201>;
  flavor = "tap-preferred";
};

// ===================
//   LAYERS
// ===================

#define AL1 0
#define AL2 1
#define I18N 2
#define SYM1 3
#define SYM2 4
#define SYS 5
#define NUM 6
#define BT 7

// ===================
//   DELAYS
// ===================

#define HOLDTAP_TAPPING_TERM_MS 190
#define HOLDTAP_QUICK_TAP_MS 250

// ===================
//   LAYOUT
// ===================

/* -------------------------------------- */
/*     0   1   2     |     3   4   5       */
/* 6   7   8   9     |    10  11  12  13  */
/*             14 15 | 16 17              */
/* -------------------------------------- */

/ {
  combos {
    compatible = "zmk,combos";
    combo_bt  {
      timeout-ms = <10>;
      key-positions = <3 4 5>;
      bindings = <&to BT>;
      layers = <SYS>;
    };
    combo_caps {
      timeout-ms = <30>;
      key-positions = <10 11 12>;
      bindings = <&caps_word>;
    };
  };

  behaviors {
    hrm: homerow_mods {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      tapping-term-ms = <300>;
      quick-tap-ms = <250>;
      flavor = "tap-preferred";
      bindings = <&kp>, <&kp>;
    };
    htl: holdtap_layer {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      tapping-term-ms = <220>;
      quick-tap-ms = <250>;
      flavor = "tap-preferred";
      bindings = <&mo>, <&kp>;
    };
    ht: holdtap {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      tapping-term-ms = <HOLDTAP_TAPPING_TERM_MS>;
      quick-tap-ms = <HOLDTAP_QUICK_TAP_MS>;
      flavor = "tap-preferred";
      bindings = <&kp>, <&kp>;
    };
    kp_ellipsis_dot: kp_ellipsis_dot {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      tapping-term-ms = <HOLDTAP_TAPPING_TERM_MS>;
      quick-tap-ms = <HOLDTAP_QUICK_TAP_MS>;
      flavor = "tap-preferred";
      bindings = <&utf_ellipsis>, <&kp>;
    };
    kp_ndash_minus: kp_ndash_minus {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      tapping-term-ms = <HOLDTAP_TAPPING_TERM_MS>;
      quick-tap-ms = <HOLDTAP_QUICK_TAP_MS>;
      flavor = "tap-preferred";
      bindings = <&utf_ellipsis>, <&kp>;
    };
    kp_ordfem_at: kp_ordfem_at {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      tapping-term-ms = <HOLDTAP_TAPPING_TERM_MS>;
      quick-tap-ms = <HOLDTAP_QUICK_TAP_MS>;
      flavor = "tap-preferred";
      bindings = <&utf_ellipsis>, <&kp>;
    };
    kp_ordmasc_hash: kp_ordmasc_hash {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      tapping-term-ms = <HOLDTAP_TAPPING_TERM_MS>;
      quick-tap-ms = <HOLDTAP_QUICK_TAP_MS>;
      flavor = "tap-preferred";
      bindings = <&utf_ellipsis>, <&kp>;
    };
    kp_mdash_underscore: kp_mdash_underscore {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      tapping-term-ms = <HOLDTAP_TAPPING_TERM_MS>;
      quick-tap-ms = <HOLDTAP_QUICK_TAP_MS>;
      flavor = "tap-preferred";
      bindings = <&utf_ellipsis>, <&kp>;
    };
  };
  keymap {
    compatible = "zmk,keymap";
    alpha1 {
      bindings = <
                      &hrm LGUI L   &hrm LALT G   &hrm LCTL D             &hrm RCTL H   &hrm LALT U   &hrm LGUI O
        &mt LSHIFT I  &htl SYS  S   &htl SYM2 R   &htl SYM1 T             &htl SYM1 N   &htl SYM2 E   &htl SYS  A   &htl RSHIFT C
                                    &htl NUM 0    &mt LC(LS(LALT)) SPC    &mo I18N      &mo AL2
      >;
    };

    alpha2 {
      bindings = <
                      &hrm LGUI V   &hrm LALT W   &hrm LCTL M             &hrm RCTL F   &hrm LALT Y   &hrm LGUI Z
        &mt LSHIFT Q  &kp  J        &kp  P        &kp  K                  &kp B         &kp  COMMA    &kp  X        &mt RSHIFT SQT
                                    &type_qui     &type_que               &none         &none
      >;
    };

		sym2 { bindings = < &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none >; };
		sys  { bindings = < &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none >; };
		num  { bindings = < &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none >; };
		bt   { bindings = < &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none >; };

    i18n {
      bindings = <
                      &kp O         &kp RA(Y)       &type_ldotl           &kp RA(J)     &kp RA(U)     &kp RA(O)
        &kp RA(I)     &kp A         &kp E           &type_cio             &kp RA(N)     &kp RA(E)     &kp RA(A)      &kp RA(COMMA)
                                    &type_qui_acute &type_que_acute       &none         &none
      >;
    };

    sym1 {
      bindings = <
                      &kp MINUS     &kp STAR      &kp PLUS                &kp CARET     &kp LPAR      &kp RPAR
        &kp SLASH     &kp EXCL      &kp QMARK     &kp BSLH                &kp PERCENT   &kp LT        &kp GT        &kp SEMICOLON
                                    &none         &kp EQUAL               &none         &none
      >;
    };

//    sym2 {
//      bindings = <
//                      &kp AT        &kp HASH      &kp DOLLAR              &kp AMPS      &kp LBRC      &kp RBRC
//        &kp GRAVE     &kp DQT       &kp UNDER     &kp PIPE                &kp TILDE     &kp LBKT      &kp RBKT      &kp COLON
//                                    &none         &utf_nbsp               &none         &none
//      >;
//    };
//
//    sys {
//      bindings = <
//                      &kp ESC       &kp LC(LS(TAB)) &kp DEL                 &kp ENTER     &kp LEFT      &kp PSCRN
//        &none         &kp TAB       &kp LC(TAB)     &kp BKSP                &kp DOWN      &kp UP        &kp RIGHT   &kp RSHIFT
//                                    &kp LC(C)       &kp LC(V)               &kp LC(LS(V)) &kp LC(LS(C))
//      >;
//    };
//
//    num {
//      bindings = <
//                      &kp MINUS     &hrm LALT STAR &hrm LCTL PLUS          &hrm RCTL N7  &hrm LALT N8   &kp N9
//        &kp SLASH     &kp N3        &kp N2         &kp N1                  &kp N4        &kp N5         &kp N6      &kp ENTER
//                                    &none          &none                   &kp N0        &kp DOT
//      >;
//    };
//
//    bt {
//      bindings = <
//                      &none         &none         &none                   &none         &none         &none
//        &kp BT_CLR    &kp BT_SEL 2  &kp BT_SEL 1  &kp BT_SEL 0            &none         &none         &none         &none
//                                    &sys_reset    &bootloader             &none         &none
//      >;
//    };
  };
};

